1) main.cpp and rapidcvs.h 
2) I used <"rapidcsv.h"> for separate the delimiters, <queue> for queue in BFS, <regex> for iterators
3) when execute the a.out file -> a menu with 6 options (it's not a loop) and an exit. 
4)  --option 0 will print report.txt
    --option 1 will print the original list 
    --option 2 will perform BFS and show all the visited counties to show that the graph is connected
    --option 3 will perform DFS and show all the visited counties to show that the graph is connected
    --option 4 will print Prim's Minimum Spanning Tree and will create 2 outputs, 1 main output which is output_prims.csv in the same structure as the input and the second output will be a list prims_list.csv which is a list of countis in prim's MST
    --option 5 will print kruskal's Minimum Spanning Tree and will create 2 outputs, 1 main output which is output_kruskal.csv in the same structure   as the input and the second output will be a list kruskal_list.csv which is a list of countis in kruskal's MST
    --option 6 will exit (or any number greater)

5) In Adjacency list , for every vertex we store its neighbours. In the worst case, if a graph is connected O(V) is required for a vertex and O(E) is required for storing neighbours corresponding to every vertex .Thus, overall space complexity is O(|V|+|E|.There are two pointers in adjacency list first points to the front node and the other one points to the rear node.Thus insertion of a vertex can be done directly in O(1) time.Similar to insertion of vertex here also two pointers are used pointing to the rear and front of the list. Thus, an edge can be inserted in O(1)time.In order to remove a vertex, we need to search for the vertex which will require O(|V|) time in worst case, after this we need to traverse the edges and in worst case it will require O(|E|) time.Hence, total time complexity is O(|V|+|E|).In an adjacency list every vertex is associated with a list of adjacent vertices. For a given graph, in order to check for an edge we need to check for vertices adjacent to given vertex. A vertex can have at most O(|V|) neighbours and in worst can we would have to check for every adjacent vertex. Therefore, time complexity is O(|V|) .
In adjacency matrix makes use of VxV matrix, so space required in worst case is O(|V|2).In order to add a new vertex to VxV matrix the storage must be increases to (|V|+1)2. To achieve this we need to copy the whole matrix. Therefore the complexity is O(|V|.To add an edge say from i to j, matrix[i][j] = 1 which requires O(1) time.
